#!/usr/bin/env python3

import argparse
import io
import socket
import tempfile
import threading
import time
import traceback
from pathlib import Path

import gi
import qrcode
import setproctitle
import zmq
import zmq.auth
import zmq.auth.thread
from PIL import Image

gi.require_version('Notify', '0.7')

from gi.repository import Notify

BOLD = "\033[1m"
GREEN = "\033[0;32m"
RED = "\033[0;31m"
RESET = "\033[0m"

PREFIX = "==> "
GREEN_PREFIX = f"{GREEN}{PREFIX}{RESET}"
RED_PREFIX = f"{RED}{PREFIX}{RESET}"


def start():
    setproctitle.setproctitle("a2ln")

    main_directory = Path(Path.home(), ".a2ln")

    client_public_keys_directory = main_directory / "clients"
    server_keys_directory = main_directory / "server"

    main_directory.mkdir(exist_ok=True)

    client_public_keys_directory.mkdir(exist_ok=True)

    if not server_keys_directory.exists():
        server_keys_directory.mkdir()

        zmq.auth.create_certificates(server_keys_directory, "server")

    args = parse_args()

    server_public_key, server_secret_key = zmq.auth.load_certificate(server_keys_directory / "server.key_secret")

    NotificationServer(client_public_keys_directory,
                       server_public_key,
                       server_secret_key,
                       args.notification_port,
                       args.pairing_port).start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\r", end="")

        exit()


def parse_args():
    argument_parser = argparse.ArgumentParser(description="A way to display Android phone notifications on Linux")

    argument_parser.add_argument("notification_port", metavar="NOTIFICATION-PORT", type=int, help="The port to listen "
                                                                                                  "for notifications")
    argument_parser.add_argument("--pairing-port", metavar="PAIRING-PORT", type=int, help="The port to listen for "
                                                                                          "pairing requests (by "
                                                                                          "default random)")

    return argument_parser.parse_args()


def get_ip():
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as client:
        client.connect(("8.8.8.8", 80))

        return client.getsockname()[0]


def send_notification(title, text, picture_file=None):
    if picture_file is None:
        Notify.Notification.new(title, text, "dialog-information").show()
    else:
        Notify.Notification.new(title, text, picture_file.name).show()

        picture_file.close()

    print(f"\n{GREEN_PREFIX}Sent notification (Title: {BOLD}{title}{RESET}, Text: {BOLD}{text}{RESET})")


def handle_exception(name, exception):
    match str(exception):
        case "Address already in use":
            print(f"{RED_PREFIX}Cannot start {name} server: Port already used")
        case "Permission denied":
            print(f"{RED_PREFIX}Cannot start {name} server: No permission (note that you cannot use a port "
                  "higher than 1023 if you are not root)")
        case _:
            print(f"{RED_PREFIX}Cannot start {name} server:")

            traceback.print_exc()

    return


class NotificationServer(threading.Thread):
    def __init__(self,
                 client_public_keys_directory,
                 server_public_key,
                 server_secret_key,
                 notification_port,
                 pairing_port):
        super().__init__(daemon=True)

        self.client_public_keys_directory = client_public_keys_directory
        self.server_public_key = server_public_key
        self.server_secret_key = server_secret_key
        self.notification_port = notification_port
        self.pairing_port = pairing_port
        self.authenticator = None

    def run(self) -> None:
        super(NotificationServer, self).run()

        with zmq.Context() as context:
            self.authenticator = zmq.auth.thread.ThreadAuthenticator(context)

            self.authenticator.start()

            self.update_client_public_keys()

            with context.socket(zmq.PULL) as server:
                server.curve_publickey = self.server_public_key
                server.curve_secretkey = self.server_secret_key

                server.curve_server = True

                try:
                    server.bind(f"tcp://*:{self.notification_port}")

                    print(f"{GREEN_PREFIX}Notification server running on port {BOLD}{self.notification_port}{RESET}")
                except Exception as exception:
                    self.authenticator.stop()

                    handle_exception("notification", exception)

                    return
                finally:
                    PairServer(self.client_public_keys_directory, self.server_public_key, self.pairing_port,
                               self).start()

                Notify.init("Android 2 Linux Notifications")

                while True:
                    request = server.recv_multipart()

                    length = len(request)

                    if length != 2 and length != 3:
                        continue

                    if length == 3:
                        picture_file = tempfile.NamedTemporaryFile(suffix=".png")

                        Image.open(io.BytesIO(request[2])).save(picture_file.name)
                    else:
                        picture_file = None

                    threading.Thread(target=send_notification,
                                     args=(request[0].decode("utf-8"), request[1].decode("utf-8"), picture_file),
                                     daemon=True).start()

    def update_client_public_keys(self):
        if self.authenticator is not None and self.authenticator.is_alive():
            self.authenticator.configure_curve(domain="*", location=self.client_public_keys_directory.as_posix())


class PairServer(threading.Thread):
    def __init__(self,
                 client_public_keys_directory,
                 server_public_key,
                 pairing_port,
                 notification_server):
        super(PairServer, self).__init__(daemon=True)

        self.client_public_keys_directory = client_public_keys_directory
        self.server_public_key = server_public_key
        self.pairing_port = pairing_port
        self.notification_server = notification_server

    def run(self):
        super(PairServer, self).run()

        with zmq.Context() as context, context.socket(zmq.REP) as server:
            if self.pairing_port is None:
                self.pairing_port = server.bind_to_random_port("tcp://*")
            else:
                try:
                    server.bind(f"tcp://*:{self.pairing_port}")
                except Exception as exception:
                    handle_exception("pairing", exception)

                    return

            ip = get_ip()

            qr_code = qrcode.QRCode()

            qr_code.add_data(f"{ip}:{self.pairing_port}")
            qr_code.print_ascii()

            print(
                f"{GREEN_PREFIX}To pair a new device, open the Android 2 Linux Notifications app and scan this QR "
                "code or enter the following:")
            print(f"IP: {BOLD}{ip}{RESET}")
            print(f"Port: {BOLD}{self.pairing_port}{RESET}")
            print(f"\n{GREEN_PREFIX}Public Key: {BOLD}{self.server_public_key.decode('utf-8')}{RESET}")

            while True:
                request = server.recv_multipart()

                if len(request) != 2:
                    continue

                client_ip = request[0].decode("utf-8")
                client_public_key = request[1].decode("utf-8")

                print(f"\n{GREEN_PREFIX}New pairing request")
                print(f"IP: {BOLD}{client_ip}{RESET}")
                print(f"Public Key: {BOLD}{client_public_key}{RESET}")

                if input("\nAccept? (Yes/No): ").lower() != "yes":
                    print("Pairing cancelled.")

                    server.send_multipart([b""])

                    continue

                with open((self.client_public_keys_directory / client_ip).as_posix() + ".key", "w",
                          encoding="utf-8") as client_key_file:
                    client_key_file.write("metadata\n"
                                          "curve\n"
                                          f"    public-key = \"{client_public_key}\"\n")

                server.send_multipart([str(self.notification_server.notification_port).encode("utf-8"),
                                       self.server_public_key])

                self.notification_server.update_client_public_keys()

                print("Pairing finished.")


start()
